// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Database.ClassLibrary.DatabaseFirst
{
    public partial class RabbitMQ_DbContext : DbContext
    {
        public RabbitMQ_DbContext()
        {
        }

        public RabbitMQ_DbContext(DbContextOptions<RabbitMQ_DbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<CartToCart> CartToCart { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<Wallet> Wallet { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            string connection = @"Data Source=localhost,1430;Initial Catalog=RabbitMQ_Db;User ID=sa;Password=admin1234@;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False";
            optionsBuilder.UseSqlServer(connection);
        }

        public override int SaveChanges()
        {
            try
            {
                return base.SaveChanges();
            }
            //catch (DbEntityValidationException vex)
            //{
            //    var exception = HandleDbEntityValidationException(vex);
            //    throw exception;
            //}
            catch (DbUpdateException dbu)
            {
                var exception = HandleDbUpdateException(dbu);
                Debug.WriteLine(exception.Message.ToString());

                throw exception;

            }
        }

        private Exception HandleDbUpdateException(DbUpdateException dbu)
        {
            var builder = new StringBuilder("A DbUpdateException was caught while saving changes. ");

            try
            {
                foreach (var result in dbu.Entries)
                {
                    builder.AppendFormat("Type: {0} was part of the problem.", result.Entity.GetType().FullName);
                }
            }
            catch (Exception e)
            {
                builder.Append("Error parsing DbUpdateException: " + e.ToString());
            }

            string message = builder.ToString();
            return new Exception(message, dbu);
        }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CartToCart>(entity =>
            {
                entity.HasKey(e => e.IdCartToCart)
                    .HasName("PK__CartToCa__A95560FAFA320E57");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.ReceiverUserIdForCartToCart).HasColumnName("ReceiverUserId_forCartToCart");

                entity.Property(e => e.SenderUserIdForCartToCart).HasColumnName("SenderUserId_forCartToCart");

                entity.HasOne(d => d.ReceiverUserIdForCartToCartNavigation)
                    .WithMany(p => p.CartToCartReceiverUserIdForCartToCartNavigation)
                    .HasForeignKey(d => d.ReceiverUserIdForCartToCart)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReceiverUserId_forCartToCart");

                entity.HasOne(d => d.SenderUserIdForCartToCartNavigation)
                    .WithMany(p => p.CartToCartSenderUserIdForCartToCartNavigation)
                    .HasForeignKey(d => d.SenderUserIdForCartToCart)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SenderUserId_forCartToCart");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.IdUser)
                    .HasName("PK__User__B7C92638DE00BC3F");

                entity.Property(e => e.City).IsRequired();

                entity.Property(e => e.Name).IsRequired();

                entity.Property(e => e.PhoneNumber).IsRequired();

                entity.Property(e => e.Surname).IsRequired();

                entity.Property(e => e.When).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Wallet>(entity =>
            {
                entity.HasKey(e => e.IdWallet)
                    .HasName("PK__Wallet__321BF175F92987C3");

                entity.Property(e => e.Balance).HasColumnType("money");

                entity.Property(e => e.Currency).IsRequired();

                entity.Property(e => e.UserIdForWallet).HasColumnName("UserId_forWallet");

                entity.HasOne(d => d.UserIdForWalletNavigation)
                    .WithMany(p => p.Wallet)
                    .HasForeignKey(d => d.UserIdForWallet)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserId_forWallet");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}